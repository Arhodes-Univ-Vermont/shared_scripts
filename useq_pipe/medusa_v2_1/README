
#############################################

MeDUSA v2.0 - Methylated DNA Utility for Sequence Analysis

Gareth Wilson
Medical Genomics
UCL Cancer Institute

gareth.wilson@ucl.ac.uk

Citation: Wilson GA, Dhami P, Feber A, Cortazar D, Suzuki Y, Schulz R, Schar P, Beck S (2012) Resources for methylome analysis suitable for gene knockout studies of potential epigenome modifiers. GigaScience 1 (1). doi:10.1186/2047-217X-1-3


#############################################

Disclaimer:

This software is distributed with no warrantee or guarantee of fitness. See the GPL http://www.gnu.org/licenses/gpl.html


WHAT IS MeDUSA?

MeDUSA brings together numerous software packages to perform a full analysis of MeDIP-seq data, including sequence alignment, quality control (QC), and determination and annotation of DMRs. In contrast to previously published tools for MeDIP-seq analysis (e.g. Batman, MEDIPS) in which the primary focus was the ability to accurately call absolute methylation values based on CpG density, the focus for MeDUSA is the accurate and statistically rigorous identification of DMRs.

To achieve this, relative changes in DNA methylation between cohorts (rather than absolute changes within cohort) need to be determined, and as such the problem has much in common with identifying differential expression between RNAseq cohorts. Originally, MeDUSA utilized several applications from within the USeq software suite, and in turn used the R Bioconductor package DESeq for differential count analysis. In the latest version (2.0), the DMR calling method has changed to use the new version of MEDIPS v1.10 (http://www.bioconductor.org/packages/2.12/bioc/html/MEDIPS.html). This has resulted in a more time and computationally efficient pipeline. It has also made the pipeline a little easier to configure. In addition, MeDUSA will control several other important functions from the alignment (BWA) and subsequent filtering (SAMtools), through generation of numerous quality control metrics (FastQC) and MEDIPS), and finally preliminary annotation of the DMRs (utilizing the capabilities of BEDTools).


PREREQUISITES

MeDUSA is written for use on a Linux system.

As the role of MeDUSA is to pipeline numerous analyses and stages, there are a large number of prerequisites. These should all be installed as described in their manual and should be visible in the users $PATH, with the exception of USeq - the path to which needs to be entered in the MeDUSA config file (path2useqJava).

1. Software

Perl v5.10 or later. May work on older versions. (http://www.perl.org/)
R v2.14 or later (http://www.r-project.org/)
BWA v0.5.8 or later (http://bio-bwa.sourceforge.net/)
SAMtools v0.1.9 or later (http://samtools.sourceforge.net/)
FastQC v0.93 or later (http://www.bioinformatics.bbsrc.ac.uk/projects/fastqc/)
BEDTools v2.10 or later (http://code.google.com/p/bedtools/)

2. R modules

BioConductor v2.9 or later (http://www.bioconductor.org/install/)
MEDIPS v1.0 (http://www.bioconductor.org/packages/2.7/bioc/html/MEDIPS.html)
ggplot2 (http://ggplot2.org)
Relevent BSgenome package e.g. BSgenome.Mmusculus.UCSC.mm10

3. Perl modules

POSIX
List::Util 'shuffle'
Config::Simple
Getopt::Std
Parallel::ForkManager


4. Genome data and annotation

MeDUSA can in principle be run on any species with a reference genome - however it is currently configured to run on Mouse, Human, Dog, Chimp and Macaca. When specifying species in the config file, it should be written as listed here i.e. Mouse.

Reference genome from UCSC in fasta format e.g. human hg19 - http://hgdownload.cse.ucsc.edu/goldenPath/hg19/bigZips/chromFa.tar.gz
Feature annotation - provided for hg19 and mm10 in the annotation_files directory of the MeDUSA distribution. If other species or builds are required please contact gareth.wilson@ucl.ac.uk. The user can extend the feature list by providing their own .gff file and editing the features.list file.
Chromosome size files obtained from UCSC using the fetchChromSizes script - http://hgdownload.cse.ucsc.edu/admin/exe/linux.x86_64/fetchChromSizes

PREPARING GENOME FILES

Once you've downloaded the relevant chromFa.tar.gz file, follow these steps (this example is for mouse mm10, change the number if dealing with human i.e. `seq 1 19` should be `seq 1 22`):

# unzip the tar archive
tar -zxvf chromFa.tar.gz
# concatenate the individual chromosomes into single genome fasta file
for c in `seq 1 19` X Y;do echo $c;cat chr${c}.fa >>mouse_genome.fa;done
# use bwa to index the genome file so it can be used for alignment
bwa index -a bwtsw mouse_genome.fa
# use samtools to create an indexed file for further parsing
samtools faidx mouse_genome.fa
# create chrom sizes file
fetchChromSizes mm10 >mm10.chrom.sizes


INPUT FILES

MeDUSA requires a config file and, if running from the start of the pipeline, paired end .fastq files. The sequence files must be in the format {sampleID}_R{1|2}.fastq

RUNNING MEDUSA

MeDUSA is run using a simple command line interface:

perl medusa.pl

Usage:
-p medusa configuration file
-t list of ids for treatment samples (comma separated)
-c list of ids for control samples (comma separated)
-h list options

All parameters must be entered for medusa to run (with the exception of -h). -p directs the script to the main configuration file. This file dictates which parts of the pipeline are run and directs the script to the correct files. An example .cfg file is provided in the distribution.

It is recommended that on first usage, the pipeline is run one step at a time. This will simplify any potential error checking possibly as a result of uninstalled software or incorrect config file setup. Additionally, I would suggest using the 'nohup' command to log the standard output - this makes it much easier to solve problems!

MeDUSA allows for the use of multiple processing cores for certain parts of the pipeline (part 1 and part 2). There are two parameters to set in the configuration file: medusa_forks & bwa_aln_threads. medusa_forks represents the number of samples from your input list to run at a single time. For every extra sample being run, your RAM usage will increase accordingly. This parameter affects all of part 1 and part 2. The second parameter, bwa_aln_threads, is only used for the initial stages of the bwa alignment (bwa aln). An increase in this parameter doesn't have issues with RAM so the limiting factor here is cores and IO. The best thing to do is experiment!


EXAMPLE RUN

The file medusa_example.cfg is used in this example. The input files are stored in the directory test_input/ and represent a control cohort and a disease cohort obtained from mouse. The reads are paired end 36bp long. The files are called control_A_1.fastq, control_A_2.fastq, control_B_1.fastq, control_B_2.fastq, control_C_1.fastq, control_C_2.fastq and disease_A_1.fastq, disease_A_2.fastq, disease_B_1.fastq, disease_B_2.fastq, disease_C_1.fastq, disease_C_2.fastq.

Given these files, the command to run medusa would be:

nohup perl medusa.pl -p medusa_example.cfg -t disease_A,disease_B,disease_C -c control_A,control_B,control_C &

If required, test fastq files can be provided - email gareth.wilson@ucl.ac.uk


RECOMMENDED PARAMETERS

Sometimes you don't want to run the full pipeline, hence the ability to switch the various parts on and off. A regular use is to run the initial alignment, QC and filtering without proceeding to DMR calling with a single cohort. In this case, you can set -c to 0.

nohup perl medusa.pl -p medusa_example.cfg -t disease_A,disease_B,disease_C -c 0 &


PROBLEMS?

Most problems can be attributed to the prerequisite installations. If in doubt, install the latest versions.
Other problems:
Contact gareth.wilson@ucl.ac.uk


